---
import type { JSX } from "astro/jsx-runtime";
import clsx from "clsx/lite";

import { AstroError } from "astro/errors";

const VARIANTS = [
  "elevated",
  "filled",
  "tonal",
  "outlined",
  "text",
  "error",
  "success",
] as const;

export type ButtonVariant = typeof VARIANTS[number];

type Props = {
  variant: ButtonVariant;
  acrylic?: boolean;
} & (JSX.ButtonHTMLAttributes | JSX.AnchorHTMLAttributes);

const {
  variant,
  acrylic = false,
  class: customClass,
  ...props
} = Astro.props;

if (!VARIANTS.includes(variant)) {
	throw new AstroError(
		"Invalid `variant` prop passed to the `<Button>` component.\n",
		`Received: ${JSON.stringify(variant)}\n`
    + `Expected one of ${VARIANTS.map((variant) => JSON.stringify(variant)).join(', ')}`,
	);
}


const hasLeading = Astro.slots.has("leading");
const hasTrailing = Astro.slots.has("trailing");

const className = clsx(
  "not-content",
  "button", variant, acrylic && "acrylic",
  hasLeading && "with-leading",
  hasTrailing && "with-trailing",
  customClass,
);
---

{
  "href" in props
  ? <a
      {...props}
      class={className}>
        <slot name="leading" />
        <slot />
        <slot name="trailing" />
    </a>
  : <button
      {...props as JSX.ButtonHTMLAttributes}
      class={className}>
        <slot name="leading" />
        <slot />
        <slot name="trailing" />
    </button>
}

<style>
  @keyframes focus-grow {
    from {
      outline-width: 0px;
    }
    to {
      outline-width: 8px;
    }
  }
  @keyframes focus-shrink {
    from {
      outline-width: 8px;
    }
  }

  .button {
    -webkit-tap-highlight-color: transparent;
    position: relative;
    appearance: none;
    border: none;
    background-color: transparent;

    display: flex;
    align-items: center;
    justify-content: center;

    gap: 8px;

    height: 40px;
    border-radius: 9999px;

    padding: 0 24px;

    user-select: none;
    cursor: pointer;
    text-decoration: none;

    outline: none;

    font-family: var(--text-label-large-family);
    font-size: var(--text-label-large-size);
    font-weight: var(--text-label-large-weight);
    line-height: var(--text-label-large-line-height);
    letter-spacing: var(--text-label-large-letter-spacing);

    &.with-leading {
      padding-left: 16px;
    }
    &.with-trailing {
      padding-right: 16px;
    }

    &:focus-visible::after {
      content: "";
      position: absolute;
      inset: -2px;
      border-radius: inherit;
      outline: 3px solid var(--color-secondary);
      z-index: 1;

      animation-name: focus-grow, focus-shrink;
      animation-delay: 0ms, 150ms;
      animation-duration: 150ms, 450ms;
      animation-timing-function: cubic-bezier(0, 0.2, 0, 1);
    }
  }

  .button.acrylic {
    backdrop-filter: blur(8px);
  }
  .elevated {
    background-color: var(--color-surface-container-low);
    color: var(--color-primary);

    box-shadow:
      0px 1px 2px 0px color-mix(in srgb, var(--color-shadow) 30%, transparent),
      0px 1px 3px 1px color-mix(in srgb, var(--color-shadow) 15%, transparent);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-surface-container-low), var(--color-primary) 8%);
        box-shadow:
          0px 1px 2px 0px color-mix(in srgb, var(--color-shadow) 30%, transparent),
          0px 2px 6px 2px color-mix(in srgb, var(--color-shadow) 15%, transparent);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-surface-container-low), var(--color-primary) 10%);
      box-shadow:
        0px 1px 2px 0px color-mix(in srgb, var(--color-shadow) 30%, transparent),
        0px 1px 3px 1px color-mix(in srgb, var(--color-shadow) 15%, transparent);
    }
  }
  .elevated.acrylic {
    background-color: color-mix(in srgb, var(--color-surface-container-low) 60%, transparent);
    color: var(--elevatedText);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-surface-container-low) 60%, var(--color-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-surface-container-low) 60%, var(--color-primary) 10%);
    }
  }
  .filled {
    background-color: var(--color-primary);
    color: var(--color-on-primary);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-primary), var(--color-on-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-primary), var(--color-on-primary) 10%);
    }
  }
  .tonal {
    background-color: var(--color-secondary-container);
    color: var(--color-on-secondary-container);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-secondary-container), var(--color-on-secondary-container) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-secondary-container), var(--color-on-secondary-container) 10%);
    }
  }
  .tonal.acrylic {
    background-color: color-mix(in srgb, var(--color-secondary-container) 62%, transparent);
    color: var(--color-on-secondary-container);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-secondary-container) 62%, var(--color-on-secondary-container) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-secondary-container) 62%, var(--color-on-secondary-container) 10%);
    }
  }
  .outlined {
    background-color: transparent;
    color: var(--color-primary);
    border: 1px solid var(--color-outline);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, transparent, var(--color-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, transparent, var(--color-primary) 10%);
    }
  }
  .outlined.acrylic {
    background-color: color-mix(in srgb, var(--color-surface) 32%, transparent);
    color: var(--color-primary);
    border: 1px solid var(--color-outline);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-surface) 32%, var(--color-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-surface) 32%, var(--color-primary) 10%);
    }
  }
  .text {
    background-color: transparent;
    color: var(--color-primary);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, transparent, var(--color-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, transparent, var(--color-primary) 10%);
    }
  }
  .text.acrylic {
    background-color: color-mix(in srgb, var(--color-surface) 24%, transparent);
    color: var(--color-primary);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-surface) 24%, var(--color-primary) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-surface) 24%, var(--color-primary) 10%);
    }
  }

  .error {
    background-color: var(--color-error);
    color: var(--color-on-error);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-error), var(--color-on-error) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-error), var(--color-on-error) 10%);
    }
  }
  .success {
    background-color: var(--color-success);
    color: var(--color-on-success);

    @media (hover: hover) {
      &:hover {
        background-color: color-mix(in srgb, var(--color-success), var(--color-on-success) 8%);
      }
    }
    &:active {
      background-color: color-mix(in srgb, var(--color-success), var(--color-on-success) 10%);
    }
  }
</style>
