---
import { IconButton } from "../primitives/icon-button";
import { ThemeSelect } from "../theme";

import MenuIcon from "~icons/material-symbols-rounded/menu:outlined";

import { Logo } from "../logo";
import { NavigationDrawer } from "../navigation";
import { Search } from "../search";
import { NavigationTab } from "../navigation";
import { dynamicToStatic, getDestinations } from "../navigation/destinations";
import { fade } from "astro/virtual-modules/transitions.js";
import type { TransitionAnimationPair } from "astro";
import { THEME } from "../../styles/theme";

import RssFeedIcon from "~icons/material-symbols-rounded/rss-feed:outlined";

interface Props {}

const fadeOver: TransitionAnimationPair = {
  old: {
    name: "none",
  },
  new: {
    name: "fade-over",
    duration: THEME.duration.short2,
    easing: THEME.easing.standard,
    fillMode: "both",
  },
};
const animate = {
  forwards: fadeOver,
  backwards: fadeOver,
}

const destinations = dynamicToStatic(Astro.url, getDestinations());

---

<header id="header" transition:name="header" transition:animate={animate} data-pagefind-ignore>
  <div class="leading">
    <NavigationDrawer
      client:load
      class="drawer"
      url={Astro.url}>
        <IconButton>
          <MenuIcon />
        </IconButton>
    </NavigationDrawer>
    <a href="/">
      <Logo class="logo" />
    </a>
  </div>
  <nav>
    <ul>
      {
        destinations.map(destination => (
          <li>
            <NavigationTab destination={destination} />
          </li>
        ))
      }
    </ul>
  </nav>
  <div class="options">
    <IconButton
      class="option rss"
      variant="tonal"
      href="/rss.xml">
        <RssFeedIcon />
    </IconButton>
    <Search client:only="solid-js" />
    <ThemeSelect client:load />
  </div>
</header>

<script>
  // const normalize = (value: number, min: number, max: number) => (value - min) / (max - min);
  // const clamp = (value: number, min: number, max: number) => Math.min(Math.max(value, min), max);

  // const header = document.getElementById("header")!;

  // let offset: number = -1;
  // const onScroll = () => {
  //   const rect = header.getBoundingClientRect();
  //   if(offset < 0) offset = rect.top;
  //   const scroll = rect.top === 0 ? window.scrollY - offset : 0;
  //   const value = clamp(normalize(scroll, 0, rect.height), 0, 1);
  //   header.style.setProperty("--header-scrolled-under-mix", `${value * 100}%`);
  // }
  // onScroll();
  // window.addEventListener("scroll", onScroll);
</script>

<script is:inline data-astro-rerun>
  document.addEventListener(
    "astro:page-load",
    () => {
      const header = document.getElementById("header");
      const onScroll = () => {
        const normalBackgroundColor = "var(--color-surface)";
        const scrolledUnderBackgroundColor = "var(--color-surface-container)";
        // const scrolledUnderBackgroundColor = `color-mix(in srgb, var(--color-surface-container) 62%, transparent)`;
        header.style.backgroundColor = window.scrollY > 0
            ? scrolledUnderBackgroundColor
            : normalBackgroundColor;
      }
      onScroll();
      window.addEventListener("scroll", onScroll);
    }
  );
</script>

<style>
  @keyframes fade-over {
    from { opacity: 0; }
  }


  #header {
    position: sticky;
    top: 0;
    left: 0;
    right: 0;
    height: 72px;


    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-inline-start: 24px;

    /* background-color: color-mix(in srgb, var(--color-surface), var(--color-surface-container) var(--header-scrolled-under-mix, 0%)); */
    background-color: var(--color-surface);
    transition: background-color 300ms var(--easing-standard);

    /* backdrop-filter: blur(8px); */

    z-index: 9999;
    isolation: isolate
  }

  .leading {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
  }

  .logo {
    width: 40px;
    height: 40px;
  }


  li {
    display: contents;
  }

  nav > ul {
    height: 100%;

    list-style: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
  }

  .options {
    height: 100%;

    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
  }

  @media only screen and (min-width: 840px) {
    .drawer {
      display: none;
    }
  }

  nav {
    display: none;
  }

  @keyframes appear {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .rss {
    display: none;
  }

  @media only screen and (min-width: 840px) {
    nav {
      display: contents;
    }

    .rss {
      display: inline-flex;
      animation: appear 300ms linear;
    }
  }
</style>
