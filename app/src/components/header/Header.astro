---
import { IconButton } from "../primitives/icon-button";
import { ThemeSelect } from "../theme";

import MenuIcon from "~icons/material-symbols-rounded/menu:outlined";

import { Logo } from "../logo";
import { NavigationDrawer } from "../navigation";
import { Search, SearchAnchor, SearchView } from "../search";
import { NavigationTab } from "../navigation";
import { dynamicToStatic, getDestinations } from "../navigation/destinations";
import type { TransitionAnimationPair } from "astro";
import { THEME } from "../../styles/theme";

import RssFeedIcon from "~icons/material-symbols-rounded/rss-feed:outlined";
import type { JSX } from "astro/jsx-runtime";

type Props = {
  withHero?: boolean;
} & Omit<JSX.HTMLAttributes, "id" | "children">;

const {
  withHero = false,
  ...rest
} = Astro.props;

const fadeOver: TransitionAnimationPair = {
  old: {
    name: "none",
  },
  new: {
    name: "fade-over",
    duration: THEME.duration.short2,
    easing: THEME.easing.standard,
    fillMode: "both",
  },
};
const animate = {
  forwards: fadeOver,
  backwards: fadeOver,
}

const destinations = dynamicToStatic(Astro.url, getDestinations());
---
<header
  id="header"
  class:list={[withHero && "with-hero"]}
  transition:name="header"
  transition:animate={animate}
  data-pagefind-ignore {...rest}>
  <div class="content">
    <div class="leading">
      <NavigationDrawer
        client:load
        class="drawer"
        url={Astro.url}>
          <IconButton>
            <MenuIcon />
          </IconButton>
      </NavigationDrawer>
      <a class="home" href="/">
        <Logo class="logo" />
      </a>
    </div>
    <nav>
      <ul>
        {
          destinations.map(destination => (
            <li>
              <NavigationTab destination={destination} />
            </li>
          ))
        }
      </ul>
    </nav>
    <div class="options">
      <IconButton
        class="option rss"
        variant="tonal"
        href="/rss.xml">
          <RssFeedIcon />
      </IconButton>
      <Search client:only="solid-js" />
      <ThemeSelect client:only="solid-js" />
    </div>
  </div>
</header>

<script is:inline data-astro-rerun>
  document.addEventListener(
    "astro:page-load",
    () => {
      const header = document.getElementById("header");
      let withHero = header.classList.contains("with-hero");
      const onScroll = () => {
        if(withHero && window.scrollY > 144) {
          header.classList.add("scrolled-under");
          header.classList.remove("with-hero");
          withHero = false;
        } else if(!withHero) {
          header.classList.toggle("scrolled-under", window.scrollY > 0);
        }
      }
      // onScroll();
      window.addEventListener("scroll", onScroll);
    }
  );
</script>

<style>
  @keyframes fade-over {
    from { opacity: 0; }
  }


  #header {
    position: sticky;
    top: 0;
    left: 0;
    right: 0;
    height: 72px;


    background-color: var(--color-surface);
    transition: background-color 300ms var(--easing-standard);
    z-index: 9999;
    isolation: isolate;
    overflow: hidden;

    &.scrolled-under {
      background-color: var(--color-surface-container);
    }

    & .content {
      position: absolute;
      width: 100%;
      height: 100%;
      bottom: 0px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding-inline-start: 24px;

      transition: bottom 600ms var(--easing-emphasized);
    }
    &.with-hero:not(.scrolled-under) {
      background-color: transparent;
      & .content {
        bottom: 72px;
      }
    }

  }

  .leading {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
  }

  .home {
    position: relative;
    width: 48px;
    height: 48px;

    display: grid;
    place-items: center;
    place-content: center;

    border-radius: 8px;
    outline: none;

    &:focus-visible::after {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: inherit;
      outline: 3px solid var(--color-secondary);
      z-index: 1;

      animation-name: focus-grow, focus-shrink;
      animation-delay: 0ms, 150ms;
      animation-duration: 150ms, 450ms;
      animation-timing-function: var(--easing-standard);
    }
  }

  .logo {
    width: 40px;
    height: 40px;
  }


  li {
    display: contents;
  }

  nav > ul {
    height: 100%;

    list-style: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .options {
    height: 100%;

    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  @media only screen and (min-width: 840px) {
    .drawer {
      display: none;
    }
  }

  nav {
    display: none;
  }

  @keyframes appear {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .rss {
    display: none;
  }

  @media only screen and (min-width: 840px) {
    nav {
      display: contents;
    }

    .rss {
      display: inline-flex;
      /* animation: appear 300ms linear; */
    }
  }
</style>
